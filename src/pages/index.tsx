import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import ScrollContainer from "react-indiana-drag-scroll";

import { api } from "@/utils/api";
import { useEffect, useRef, useState } from "react";

const Home: NextPage = () => {
  const [currSong, setCurrSong] = useState<string>("-1");
  const scrollContainerRef = useRef<HTMLElement>(null);
  const charts = api.charts.getBillboardsChartsData.useQuery();
  console.log(charts.data);

  useEffect(() => {
    const el = scrollContainerRef.current;
    if (!el) return;
    el.scrollLeft = el.scrollWidth;
  }, []);
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative flex min-h-screen flex-col items-center justify-center overflow-hidden bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white">
        <nav className="h-[64px] w-full bg-white/50"></nav>
        <ScrollContainer
          innerRef={scrollContainerRef}
          className="flex w-screen flex-1 items-center overflow-x-scroll px-4 py-16 text-white relative"
        >
          <div className="absolute left-1/2 top-1/2 mt-10 flex h-96 w-96 -translate-x-1/2 -translate-y-1/2 flex-col items-center justify-end rounded-xl border-4">
            <div className="h-52 w-2 bg-red-500" />
          </div>
          {[...(Array(100) as number[])].map((_, i) => {
            return (
              <div
                key={i}
                className="h-72 w-72 flex-shrink-0 border-2 border-gray-400 p-10"
              >
                {i}
              </div>
            );
          })}
          <div
            className="h-72 flex-shrink-0"
            style={{
              width: "calc(50vw - 144px)",
            }}
          />
        </ScrollContainer>
        <div className="h-12">{currSong}</div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
